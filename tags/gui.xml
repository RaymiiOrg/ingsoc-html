<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag gui on Raymii.org</title> 
            <link>https://raymii.org/s/tags/gui.xml</link> 
            <description>RSS feed for tag gui on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/gui.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>QT / QML Signals and Slots with C++</title> 
                <link>https://raymii.org/s/snippets/Cpp_QT_QML_Signals_and_Slots.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_QT_QML_Signals_and_Slots.html</guid>
                <description>QT has an Observer mechanism built in, which they call '[Signals and Slots](https://web.archive.org/web/20210210180603/https://doc.qt.io/qt-5/signalsandslots.html)'. It allows objects to communicate with each other without having to have knowledge of either ones internals. By inheriting from `QObject` and defining a few `Q_PROPERTY` macro's, the QT Meta Object Compiler (`moc`) does all the hard work for you.
Inside a C++ class this all works handy dandy and is reasonable easy to follow, but when using QML it requires a bit more work. This small example shows you how to bind QML and C++ together using signals and slots, in QT 5.12.
This small example shows you how to setup a signal / slot from C++ to QML and back.</description> 
                <pubDate>Thu, 25 Feb 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 25 Feb 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>The Common Desktop Environment (CDE) is still developed and modern in 2021</title> 
                <link>https://raymii.org/s/blog/The_Common_Desktop_Environment_CDE_is_still_developed_in_2021.html</link> 
                <guid>https://raymii.org/s/blog/The_Common_Desktop_Environment_CDE_is_still_developed_in_2021.html</guid>
                <description>While playing around with the GUI on OpenVMS I was looking for CDE documentation and I found out CDE is still being developed and can be installed on modern linux. This quick post shows you how to install CDE on Debian 10 and includes a bit on compiling GENERIC TETRIS, the same program I installed on OpenVMS. Really cool to compile and run a game from 1992 on a retro/modern desktop environment.</description> 
                <pubDate>Thu, 28 Jan 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 28 Jan 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>OpenVMS CDE Desktop Remote X session GUI (on AXPbox)</title> 
                <link>https://raymii.org/s/blog/OpenVMS_CDE_Desktop_remote_x_axpbox.html</link> 
                <guid>https://raymii.org/s/blog/OpenVMS_CDE_Desktop_remote_x_axpbox.html</guid>
                <description>Last year November, I posted on a new OpenVMS related project, AXPbox, the open source Alpha emulator, a fork of es40 by Tom&amp;aacute;&amp;scaron; Glozar. Last week I put together the first official release of AXPbox, one of the changes being in the network code, making it more stable, thus being able to run a remote X session. Meaning, you can run the CDE desktop and enjoy everything the OpenVMS GUI has to offer. This article shows you how to run the CDE GUI in a remote X session, including switching between the old Motif look and the new DECWindows and how to run Tetris.</description> 
                <pubDate>Tue, 26 Jan 2021 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 26 Jan 2021 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    