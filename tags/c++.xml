<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag c++ on Raymii.org</title> 
            <link>https://raymii.org/s/tags/c++.xml</link> 
            <description>RSS feed for tag c++ on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/c++.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>std::accumulate in C++</title> 
                <link>https://raymii.org/s/snippets/Cpp_std_accumulate.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_std_accumulate.html</guid>
                <description>I'm using codewars to practice my development skills. Today I found out about the std::accumulate method in C++ while doing an exercise there. I'm sharing it here because I never heard of it before. It is the numeric header, and it also accepts a custom binary function to apply instead of operator+. This snippet shows some examples including a lambda operator and the for loop you would use otherwise.</description> 
                <pubDate>Wed, 23 Oct 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 07 Nov 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Store multiple types in a single std::map in C++ with std::any, just like a python dict</title> 
                <link>https://raymii.org/s/articles/Store_multiple_types_in_a_single_stdmap_in_cpp_just_like_a_python_dict.html</link> 
                <guid>https://raymii.org/s/articles/Store_multiple_types_in_a_single_stdmap_in_cpp_just_like_a_python_dict.html</guid>
                <description>In C++, everything has a type. When declaring a function you specify the return type and for each parameter you specify what type it is, just as for regular variables. Templates aside (those still have a type), you almost always know what type of data you're working with. There is the 'auto' keyword, which can save you a lot of typing and duplicate code, but fundamentally you're still working with types. Since C++ 17 you can use 'std::any' to store anything, without knowing the type. This is awesome for some tasks, and horrific for most use cases. In this article I'll show an example of a 'std::map' with 'std::any', that behaves like a python 'dict', it's able to store multiple different types in the same container.</description> 
                <pubDate>Wed, 23 Sep 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 23 Sep 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>CookieNumberPrinter, incremental / idle game style numbers in C++</title> 
                <link>https://raymii.org/s/software/CookieNumberPrinter_incremental_game_style_numbers.html</link> 
                <guid>https://raymii.org/s/software/CookieNumberPrinter_incremental_game_style_numbers.html</guid>
                <description>To level up my software development skills, I'm programming a command line game in my spare  time.  It is a clone of the famous cookieclicker game by ortiel. A clone of a game is simple enough to get up and running  fairly quickly, but also extensible enough when needed. How do you store huge score numbers  when they don't fit in a long long? How do you write a game loop, how to use threads to handle  user input? Saving a game (how to design a proper save format)? Also a great way to learn about project organization, software architecture and to try out design patterns. As the game is a clone of CookieCliker, which itself is an incremental game, I had to figure out how to work with large numbers. Since this is not a university math project, I allowed myself the luxury of using Boosts Multiprecision.  The library handles the large numbers, including caluclation and operations with such a number. I did want to print the numbers in Idle Style, where large numbers are displayed with a suffix, like '1 million' instead of '1000000' and so on. This 'C++' class can be used to print Boost's 'cpp_dec_float' numbers in incremental style. It's just one header.</description> 
                <pubDate>Sat, 12 Sep 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 12 Sep 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Ubuntu Snap auto updates broke my development setup and there is no way to turn them off</title> 
                <link>https://raymii.org/s/blog/Ubuntu_Snap_auto_updates_broke_my_development_setup.html</link> 
                <guid>https://raymii.org/s/blog/Ubuntu_Snap_auto_updates_broke_my_development_setup.html</guid>
                <description>After updating-by-reinstall to Ubuntu 20.04, I installed CLion via snap since that  seemed more convinient than manually downloading a java installation. CLion is the best thing since sliced bread, or I mean a C/C++ IDE by JetBrains. Ubuntu snap is  a packaging system made by Canonical and pushed hard in Ubuntu. Today I found out the hard way that snap auto-updates and that there is no way to turn that off permanently. CLion was updated, which I noticed because the process was killed. The update broke several key plugins for my workflow  and the theme was weird. In this article I'll discuss my disgust, I as the owner of the computer want to be in full control, not some developer that decides I need auto updates. I ended up removing snap completely, and my next install will not be Ubuntu due to this.</description> 
                <pubDate>Sat, 01 Aug 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 02 Aug 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ Remove leading or trailing characters from std::string</title> 
                <link>https://raymii.org/s/snippets/Cpp_Remove_leading_or_trailing_characters_from_string.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_Remove_leading_or_trailing_characters_from_string.html</guid>
                <description>Here's a small snippet to remove leading or trailing characters from a std::string in C++. I use it to strip leading and trailing zeroes in a game score display function.</description> 
                <pubDate>Sat, 18 Jul 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 18 Jul 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Generate QR code and write it to a PNG, scaled, in C++</title> 
                <link>https://raymii.org/s/software/Cpp_generate_qr_code_and_write_it_to_png_scaled.html</link> 
                <guid>https://raymii.org/s/software/Cpp_generate_qr_code_and_write_it_to_png_scaled.html</guid>
                <description>The QR-Code-Generator library by Project Nayuki for C++ gives you an easy, fast and correct way to generate QR codes. However, you get just a data structure, showing that data is up to you. An example is provided to print the code to a terminal, but not to create and actual image file. For Java, there is an example provided which writes a PNG file, but not for C++. The author of the library also has another C++ library, Tiny-PNG-Out. It is correct up until 700 megapixel PNG files, which I hope your QR code never hits. I've written a class which bridges the two together, allowing you to both generate the QR code and write it to a PNG file, scaled up to be as readable as possible.</description> 
                <pubDate>Sun, 07 Jun 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 07 Jun 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Github Actions, C++ with Boost and cmake, almost a 50% speedup with caching</title> 
                <link>https://raymii.org/s/articles/Github_Actions_cpp_boost_cmake_speedup.html</link> 
                <guid>https://raymii.org/s/articles/Github_Actions_cpp_boost_cmake_speedup.html</guid>
                <description>For a personal project I use Github for source code hosting and Github Actions as an automated build and test tool. Github Actions compiles my cmake project and runs all the unit tests on every commit. It also saves a build artifact, the actual compiled program. By utilizing some dependency caching and make flags I sped up the build process by 43% by caching the apt install libboost1.65-dev and giving cmake a -j2 makeflag. This article shows my simple setup to compile a C++ project with cmake and Boost on Github Actions. After compilation, it runs all the tests and uploads the compiled binary for download. For my one man project it's overkill, but when collaborating or when builds take a long time on your own machine, it's great to have an automated build / test system.</description> 
                <pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 27 May 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Here be dragons, or, invalidated iterators</title> 
                <link>https://raymii.org/s/blog/Here_be_dragons_or_invalidated_iterators.html</link> 
                <guid>https://raymii.org/s/blog/Here_be_dragons_or_invalidated_iterators.html</guid>
                <description>Recently I had a new 'first-time' moment. You know the ones, the, 'oh right', moments, after you put in a bit of research. Mine was, as you might expect from all the other recent content, related to C++. I learned, the hard way, that 'iterator-based for loops' don't like to be resized during the loop. Well, they don't really care, but some precautions are to be taken since the 'iterator' used in the loop might be invalidated. Or as the very helpfull error during the crash prints to the console, 'munmap_chunk(): invalid pointer' and your debugger points you to somewhere deep in 'new_allocator.h'. In this article I'll give a few examples, both using index based for loops and iterator based for loops, plus some more details on what's going on with iterator invalidation.</description> 
                <pubDate>Sun, 03 May 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 03 May 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ async, threads and user input</title> 
                <link>https://raymii.org/s/articles/Cpp_async_threads_and_user_input.html</link> 
                <guid>https://raymii.org/s/articles/Cpp_async_threads_and_user_input.html</guid>
                <description>For an unrelated piece of code, I recently spent a few days trying to figure out if there was a portable, modern C++ way to handle user input with a timeout. If there is no input after a few seconds, the program can continue doing other things. TL;DR, there is none, since stdin is blocking I/O. At the end of the article I'll also provide the code I ended up using, which uses two actual big-boy threads, one for input and one for 'other work'.</description> 
                <pubDate>Fri, 24 Apr 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 24 Apr 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Run CLion native on Android, ditch your desktop!</title> 
                <link>https://raymii.org/s/blog/Run_CLion_on_Android.html</link> 
                <guid>https://raymii.org/s/blog/Run_CLion_on_Android.html</guid>
                <description>How often do you read articles that state that people have replaced their main computer with an iPad and are fully content? Now, how many of those articles just use a linux server (vps) somewhere with some native apps, but mostly SSH to that server? Well, what if I told you that you can run a full blown IDE, the best IDE for C++ there is, CLion by JetBrains, on Android? Including compiling, just native GCC, CMake, GDB and all the stuff you are used to? Just for fun I've installed CLion on an old Samsung Tab S2 I had lying around, using Ubuntu in a chroot. It works way better than I'd expected, with a Bluetooth keyboard and mouse it's almost as if your on a desktop. I wonder if you could run Android Studio and use the tablet to compile app's for itself. This article shows some photo's, including a mechanical keyboard, different window managers and had instructions to replicate this setup.</description> 
                <pubDate>Fri, 27 Dec 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 27 Dec 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>ScreensaverStopper, stop activating the screensaver by sending F24 often</title> 
                <link>https://raymii.org/s/software/ScreenSaverStopper.html</link> 
                <guid>https://raymii.org/s/software/ScreenSaverStopper.html</guid>
                <description>ScreensaverStopper sends the F24 keystroke every 40 seconds. This way, Windows should not activate the screensaver. Useful if you do not have rights to disable the screensaver, but can run executables. Wwritten in C++, compiled with GCC 8.1 via MinGW/cMake. Filesize is around 14 KB, memory usage after a day of running around 600KB. License is GNU GPLv3.</description> 
                <pubDate>Sat, 21 Dec 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 21 Dec 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>and &amp; or are valid in C++ (alternative tokens)</title> 
                <link>https://raymii.org/s/blog/and_or_are_valid_Cpp.html</link> 
                <guid>https://raymii.org/s/blog/and_or_are_valid_Cpp.html</guid>
                <description>A post on lobste.rs on the C feature trigraphs triggered me to write this piece on the C++ feature, alternative tokens. I've recently suprised a co- worker by using an if statement with 'or' instead of '||', which works fine, but he never saw it before. It's in C++ since C++ 11, but MSVC requires a specific compiler flag ('/Za') or the 'iso646.h' header. This post has a few samples on the usage inclusing other alternative tokens like bitor, xor and or_eq.</description> 
                <pubDate>Mon, 16 Dec 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 16 Dec 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Weight for Weight, a coding exercise that kept me busy</title> 
                <link>https://raymii.org/s/blog/Weight_for_Weight_a_coding_exersize_that_kept_me_busy.html</link> 
                <guid>https://raymii.org/s/blog/Weight_for_Weight_a_coding_exersize_that_kept_me_busy.html</guid>
                <description>I'm using codewars to practice my development skills. The exercise I was working on the past couple of days was a level higher than the 'rank' codewars gives me, so a more difficult exercise. Using the sparse free time I have, this kata took a bit longer to complete, and had me thinking about the problem when I was not doing the exercise. If a problem fascinates me that way, I can't stop thinking about it until I've solved it. In this article I'll walk you through my work on this kata.</description> 
                <pubDate>Tue, 12 Nov 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 12 Nov 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>std::string to lowercase or uppercase in C++</title> 
                <link>https://raymii.org/s/snippets/std_string_to_lowercase_or_uppercase_in_cpp.html</link> 
                <guid>https://raymii.org/s/snippets/std_string_to_lowercase_or_uppercase_in_cpp.html</guid>
                <description>I'm using codewars to practice my development skills. Today I learned a method to transform a std::string's casing, either to uppercase or lowercase. Researching it further, I also found out how to do unicode strings with boost. This article also includes a mini howto on installing Boost on Windows 10 via mingw for use with CLion.</description> 
                <pubDate>Thu, 07 Nov 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 07 Nov 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ project setup with CMake &amp; unit tests (google test)</title> 
                <link>https://raymii.org/s/tutorials/Cpp_project_setup_with_cmake_and_unit_tests.html</link> 
                <guid>https://raymii.org/s/tutorials/Cpp_project_setup_with_cmake_and_unit_tests.html</guid>
                <description>This guide will show you how to setup a new C++ project with CMake and unit tests via Google's test framework. With this setup you can get started right away with test-driven-development in C++. It is also simple enough to look and figure out how to add gtest to your existing project and start doing TDD on your legacy (existing) codebase.</description> 
                <pubDate>Tue, 01 Oct 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 06 Nov 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Only zero is false, everything else is true in C++</title> 
                <link>https://raymii.org/s/snippets/Cpp_Only_zero_is_false.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_Only_zero_is_false.html</guid>
                <description>When using numbers in a boolean (implicit conversion), remember that only zero evaluates to false. Anything else, including negative numbers, will evaluate to true. This snippet talks about the rules for implicit conversion in C++ when using booleans. For seasoned programmers it's nothing new, but I found it interesting.</description> 
                <pubDate>Fri, 12 Jul 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 12 Jul 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ template definitions in a .cpp file (instead of a header file)</title> 
                <link>https://raymii.org/s/snippets/Cpp_template_definitions_in_a_cpp_file_instead_of_header.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_template_definitions_in_a_cpp_file_instead_of_header.html</guid>
                <description>In this snippet I'll show you how to place your C++ template definitions in a seperate .cpp file. I'd recommend you to just put template definitions in your header file, or a .hpp file, but if you really want to there is a trick to get them in a seperate .cpp file. The trick is to explicitly instanciate every template you're going to use at the end of the .cpp file. With many different templates and types this becomes cumbersome, but for certain usecases it could be useful. </description> 
                <pubDate>Sat, 22 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 22 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ create and write to a CSV file with a variadic template</title> 
                <link>https://raymii.org/s/snippets/Cpp_create_and_write_to_a_CSV_file_with_a_variadic_template.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_create_and_write_to_a_CSV_file_with_a_variadic_template.html</guid>
                <description>In this snippet I'll show you a variadic template to write to a file. In line with my other experiments to get a better grasp at templates, this example improves on my earlier attempt by using a variadic template, thus allowing you to provide an infinite number of columns to the csv file of any type that has the overloaded &lt;&lt; operator.</description> 
                <pubDate>Mon, 17 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 17 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ create and write to a CSV file</title> 
                <link>https://raymii.org/s/snippets/Cpp_create_and_write_to_a_csv_file.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_create_and_write_to_a_csv_file.html</guid>
                <description>In this quick snippet I'll show you how to create and write to a csv file. It includes checking if the file is writable, and if it's not there, creates it with a different first row as header. It's a quick example, I've used it to log some test data. It can probably be improved.</description> 
                <pubDate>Fri, 07 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 16 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Cooking with C++ templates and stronger types</title> 
                <link>https://raymii.org/s/blog/Cooking_with_Cpp_templates_and_stronger_types.html</link> 
                <guid>https://raymii.org/s/blog/Cooking_with_Cpp_templates_and_stronger_types.html</guid>
                <description>To gain a better understanding of C++ templates I'm playing around with them. Most of the online guides stop at the example of a simple template to, for example, get the max of two inputs, or cover just a bit more (like how to overload operators for your specific template classes to make &lt;&lt; and + / - work). Combining templates with a stronger type to pass stuff around led me to a test kitchen. As in, some code with ingredients, amounts and an oven. One small thing kept it from working, after some feedback it turned out I was passing the wrong parameters to the template. Afterwards the error also made sense. This post covers both my learning and a small piece on stronger types.</description> 
                <pubDate>Thu, 13 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Thu, 13 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ variadic template recursive example</title> 
                <link>https://raymii.org/s/snippets/Cpp_variadic_template_recursive_example.html</link> 
                <guid>https://raymii.org/s/snippets/Cpp_variadic_template_recursive_example.html</guid>
                <description>In this article I'll show you how to use a variadic template in C++. Variadic templates allow you to have a template with a variable number of arguments, also called a parameter pack. Unpacking that pack is more difficult than it should be, so we use a recursive template to iterate over all the parameters one by one. I've also included an example in Python to compare to.</description> 
                <pubDate>Sat, 08 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 08 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    