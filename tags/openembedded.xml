<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag openembedded on Raymii.org</title> 
            <link>https://raymii.org/s/tags/openembedded.xml</link> 
            <description>RSS feed for tag openembedded on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/openembedded.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>connman operstate list</title> 
                <link>https://raymii.org/s/snippets/connman_operstate_list.html</link> 
                <guid>https://raymii.org/s/snippets/connman_operstate_list.html</guid>
                <description>Recently I was debugging connection issues with a system that uses connman as it's network management software. In the log it was visible that the connection went away and came back, logged with 'operstate' $number $state. I couldn't easily find an overview of all the possible states, but since it's open source we can take a look at the code to find out. Publishing it here for future reference.</description> 
                <pubDate>Tue, 25 Jun 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Tue, 25 Jun 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Building opkg .ipk packages by hand (for OpenEmbedded/Yocto/OpenWRT)</title> 
                <link>https://raymii.org/s/tutorials/Building_IPK_packages_by_hand.html</link> 
                <guid>https://raymii.org/s/tutorials/Building_IPK_packages_by_hand.html</guid>
                <description>.ipk packages are used by a variety of embedded linux systems, like routers running OpenWRT and appliances running on OpenEmbedded (Yocto). The opkg command installs these packages and OpenEmbedded comes with a set of tools to build .ipk packages. Recently I had to create ipk packages in a scripted fashion for a few hundred systems, all unique per system. The .ipk packages includes a few software changes for debugging, a systemd service and one precompiled binary. The yocto build tools were not available on the machine where these packages would be made so I had to figure out how to make them by hand, which means, automatically. The packages are actually just compressed files containing a few control files and the data to be extracted on the filesystem. This article will walk you through the steps of creating these packages by hand.</description> 
                <pubDate>Fri, 05 Apr 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 05 Apr 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    