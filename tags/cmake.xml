<?xml version="1.0" ?>
    <rss version="2.0"  xmlns:atom="http://www.w3.org/2005/Atom">
        <channel>
            <title>RSS feed for tag cmake on Raymii.org</title> 
            <link>https://raymii.org/s/tags/cmake.xml</link> 
            <description>RSS feed for tag cmake on Raymii.org</description>
            <atom:link href="https://raymii.org/s/tags/cmake.xml" rel="self" type="application/rss+xml" />
    
            <item>
                <title>C++ set up cpp-httplib with SSL support with cMake</title> 
                <link>https://raymii.org/s/tutorials/Cpp_set_up_cpp-httplib_with_ssl_support_with_cmake.md.html</link> 
                <guid>https://raymii.org/s/tutorials/Cpp_set_up_cpp-httplib_with_ssl_support_with_cmake.md.html</guid>
                <description>For a small personal project that talks to a few JSON API's and does some data parsing I needed a header only C++ HTTP library. Header only because that is the simplest way to include it in my project, just copy and paste the file. I came across the project cpp-httplib, which fits my needs, does all the http methods, small, a few examples and it looks modern and has recent development commits. Setup and getting it working was easy, but as soon as I tried an https url, I got an exception ('https scheme is not supported.'). This guide shows you how to setup cpp-httplib for SSL support with cmake. It took me a bit longer than I wanted to set it up correctly, so why not save you the effort.</description> 
                <pubDate>Mon, 14 Dec 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Mon, 14 Dec 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>CookieNumberPrinter, incremental / idle game style numbers in C++</title> 
                <link>https://raymii.org/s/software/CookieNumberPrinter_incremental_game_style_numbers.html</link> 
                <guid>https://raymii.org/s/software/CookieNumberPrinter_incremental_game_style_numbers.html</guid>
                <description>To level up my software development skills, I'm programming a command line game in my spare  time.  It is a clone of the famous cookieclicker game by ortiel. A clone of a game is simple enough to get up and running  fairly quickly, but also extensible enough when needed. How do you store huge score numbers  when they don't fit in a long long? How do you write a game loop, how to use threads to handle  user input? Saving a game (how to design a proper save format)? Also a great way to learn about project organization, software architecture and to try out design patterns. As the game is a clone of CookieCliker, which itself is an incremental game, I had to figure out how to work with large numbers. Since this is not a university math project, I allowed myself the luxury of using Boosts Multiprecision.  The library handles the large numbers, including caluclation and operations with such a number. I did want to print the numbers in Idle Style, where large numbers are displayed with a suffix, like '1 million' instead of '1000000' and so on. This 'C++' class can be used to print Boost's 'cpp_dec_float' numbers in incremental style. It's just one header.</description> 
                <pubDate>Sat, 12 Sep 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sat, 12 Sep 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Generate QR code and write it to a PNG, scaled, in C++</title> 
                <link>https://raymii.org/s/software/Cpp_generate_qr_code_and_write_it_to_png_scaled.html</link> 
                <guid>https://raymii.org/s/software/Cpp_generate_qr_code_and_write_it_to_png_scaled.html</guid>
                <description>The QR-Code-Generator library by Project Nayuki for C++ gives you an easy, fast and correct way to generate QR codes. However, you get just a data structure, showing that data is up to you. An example is provided to print the code to a terminal, but not to create and actual image file. For Java, there is an example provided which writes a PNG file, but not for C++. The author of the library also has another C++ library, Tiny-PNG-Out. It is correct up until 700 megapixel PNG files, which I hope your QR code never hits. I've written a class which bridges the two together, allowing you to both generate the QR code and write it to a PNG file, scaled up to be as readable as possible.</description> 
                <pubDate>Sun, 07 Jun 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Sun, 07 Jun 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Github Actions, C++ with Boost and cmake, almost a 50% speedup with caching</title> 
                <link>https://raymii.org/s/articles/Github_Actions_cpp_boost_cmake_speedup.html</link> 
                <guid>https://raymii.org/s/articles/Github_Actions_cpp_boost_cmake_speedup.html</guid>
                <description>For a personal project I use Github for source code hosting and Github Actions as an automated build and test tool. Github Actions compiles my cmake project and runs all the unit tests on every commit. It also saves a build artifact, the actual compiled program. By utilizing some dependency caching and make flags I sped up the build process by 43% by caching the apt install libboost1.65-dev and giving cmake a -j2 makeflag. This article shows my simple setup to compile a C++ project with cmake and Boost on Github Actions. After compilation, it runs all the tests and uploads the compiled binary for download. For my one man project it's overkill, but when collaborating or when builds take a long time on your own machine, it's great to have an automated build / test system.</description> 
                <pubDate>Wed, 27 May 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 27 May 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ async, threads and user input</title> 
                <link>https://raymii.org/s/articles/Cpp_async_threads_and_user_input.html</link> 
                <guid>https://raymii.org/s/articles/Cpp_async_threads_and_user_input.html</guid>
                <description>For an unrelated piece of code, I recently spent a few days trying to figure out if there was a portable, modern C++ way to handle user input with a timeout. If there is no input after a few seconds, the program can continue doing other things. TL;DR, there is none, since stdin is blocking I/O. At the end of the article I'll also provide the code I ended up using, which uses two actual big-boy threads, one for input and one for 'other work'.</description> 
                <pubDate>Fri, 24 Apr 2020 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 24 Apr 2020 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>Run CLion native on Android, ditch your desktop!</title> 
                <link>https://raymii.org/s/blog/Run_CLion_on_Android.html</link> 
                <guid>https://raymii.org/s/blog/Run_CLion_on_Android.html</guid>
                <description>How often do you read articles that state that people have replaced their main computer with an iPad and are fully content? Now, how many of those articles just use a linux server (vps) somewhere with some native apps, but mostly SSH to that server? Well, what if I told you that you can run a full blown IDE, the best IDE for C++ there is, CLion by JetBrains, on Android? Including compiling, just native GCC, CMake, GDB and all the stuff you are used to? Just for fun I've installed CLion on an old Samsung Tab S2 I had lying around, using Ubuntu in a chroot. It works way better than I'd expected, with a Bluetooth keyboard and mouse it's almost as if your on a desktop. I wonder if you could run Android Studio and use the tablet to compile app's for itself. This article shows some photo's, including a mechanical keyboard, different window managers and had instructions to replicate this setup.</description> 
                <pubDate>Fri, 27 Dec 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Fri, 27 Dec 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
            <item>
                <title>C++ project setup with CMake &amp; unit tests (google test)</title> 
                <link>https://raymii.org/s/tutorials/Cpp_project_setup_with_cmake_and_unit_tests.html</link> 
                <guid>https://raymii.org/s/tutorials/Cpp_project_setup_with_cmake_and_unit_tests.html</guid>
                <description>This guide will show you how to setup a new C++ project with CMake and unit tests via Google's test framework. With this setup you can get started right away with test-driven-development in C++. It is also simple enough to look and figure out how to add gtest to your existing project and start doing TDD on your legacy (existing) codebase.</description> 
                <pubDate>Tue, 01 Oct 2019 00:00:00 GMT</pubDate>
                <lastBuildDate>Wed, 06 Nov 2019 00:00:00 GMT</lastBuildDate>
            </item>
    
        </channel>
    </rss>
    
    