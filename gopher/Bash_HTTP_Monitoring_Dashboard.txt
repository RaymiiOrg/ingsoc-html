This is a text-only version of the following page on https://raymii.org:
---
Title       : 	Bash HTTP monitoring dashboard
Author      : 	Remy van Elst
Date        : 	27-12-2020
URL         : 	https://raymii.org/s/software/Bash_HTTP_Monitoring_Dashboard.html
Format      : 	Markdown/HTML
---



This is a shell script that creates a webpage with the status of HTTP(s)
sites.  Parallel checking, thus very fast, only dependencies are curl and bash
(version 4 or above). For all of you who want a simple script with a nice
webpage to check a few websites. Perfect for a wall mounted monitoring display
and a Raspberry Pi.

Installation and configuration is easy to do inside the script. It scales
well, both on the checking side as the information display page (dense on
purpose). Failed checks appear right on top for you to act on.

I had this script running at home for at least a year. When I showed it to a
friend he liked it,  asked me to make it public, but before I did that I
polished it up a bit. There is a screenshot of that early version on this
page.

> Screenshot when all checks are green:

![all is well image][1]

[If you like this article, consider sponsoring me by trying out a Digital Ocean
VPS. With this link you'll get $100 credit for 60 days). (referral link)][99]
[99]: https://www.digitalocean.com/?refcode=7435ae6b8212

You can set an expected status code and a max timeout per check, so if you
consider your site up when it returns a 302 (redirect) or 401 (unauthorized)
the script consider that okay. If the status code is not what is configured or
there is a timeout or another error, the script considers the check failed.

[Source code here][8] on github. 

### Installation & Configuration

Make sure you have curl installed (`apt install curl`). If you need a very
simple webserver, try [micro-httpd, by ACME][5]. (`apt install micro-httpd`).

The scripts outputs HTML directly, so setup involves a cronjob that writes
that output to a file. You can view that file locally in a web browser, or 
place it on a webserver. The cronjob setup is for a webserver.

Clone the git repository:

	git clone https://github.com/RaymiiOrg/bash-http-monitoring.git
	cd bash-http-monitoring

Edit the `srvmon.sh` script and add your sites. A few examples are provided. This is the syntax:

	urls[gists]="https://gist.github.com"
	urls[lobsters]="https://lobste.rs"
	urls[raymii.org]="https://raymii.org"
	urls[example]="http://example.org:3000/this/is/a/test"

The first part between the square brackets is the name, the second part between the quotes is the URL you want
to monitor. It can be just a domain, an IP or an actual URL, including port and such.

If you want to override the default status code for a check, this is the syntax:

	statuscode[gist.github.com]=302

The first part between the square brackets must match the `urls[]` part.

Execute the script and send the output to a file in your webservers documentroot:

	bash srvmon.sh > /var/www/index.html

View that file in a web browser.

#### Cronjob setup

If you want to set up a cronjob, send the output to a temp file and when finished, move that temp
file over the "actual" file. Otherwise you might end up with an incomplete page when the checks are 
running. Like so:

	* * * * * /bin/bash /opt/srvmon/srvmon.sh > /var/www/index.html.tmp && /bin/mv /var/www/index.html.tmp /var/www/index.html

Change the folders/paths to your setup.

If the check fails for whatever reason, the "old" page will not be overridden.

### Screenshots 

All checks are okay:

![all is well image][1]

A check has failed. All failed checks appear on top:
 
![failed checks][2]

Here is how it looks with many hosts (also note how fast it executes, 5 seconds):

![many hosts][4]

This is what the early version looked like:

![beta][3]


[1]: /s/inc/img/okay.png
[2]: /s/inc/img/fail.png
[3]: /s/inc/img/firstVersion.png
[4]: /s/inc/img/many.png
[5]: https://acme.com/software/micro_httpd/
[8]: https://github.com/RaymiiOrg/bash-http-monitoring

---

License:
All the text on this website is free as in freedom unless stated otherwise. 
This means you can use it in any way you want, you can copy it, change it 
the way you like and republish it, as long as you release the (modified) 
content under the same license to give others the same freedoms you've got 
and place my name and a link to this site with the article as source.

This site uses Google Analytics for statistics and Google Adwords for 
advertisements. You are tracked and Google knows everything about you. 
Use an adblocker like ublock-origin if you don't want it.

All the code on this website is licensed under the GNU GPL v3 license 
unless already licensed under a license which does not allows this form 
of licensing or if another license is stated on that page / in that software:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Just to be clear, the information on this website is for ment for educational 
purposes and you use it at your own risk. I do not take responsibility if you 
screw something up. Use common sense, do not rm -rf / as root for example. 
If you have any questions then do not hesitate to contact me.

See https://raymii.org/s/static/About.html for details.