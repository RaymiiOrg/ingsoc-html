This is a text-only version of the following page on https://raymii.org:
---
Title       : 	Raspberry Pi FM radio transmitter with Buttons
Author      : 	Remy van Elst
Date        : 	04-02-2015
URL         : 	https://raymii.org/s/articles/Raspberry_Pi_FM_Radio_With_Buttons.html
Format      : 	Markdown/HTML
---



<img src="https://raymii.org/s/inc/img/Pi_FM_1.png" alt="PiFM 1">

The [PiFM](http://www.icrobotics.co.uk/wiki/index.php/Turning_the_Raspberry_Pi_Into_an_FM_Transmitter) project allows you 
to use a Raspberry Pi to send out a WAV file on the FM band. 

This is awesome because every normal radio then can receive your music/podcast
without expensive (sonos) equipment. It also allows you to listen in any car
without the need for a radio that handles USB or Bluetooth.

I've used a [lasercutter](https://revspace.nl/Lasercutter) to craft a new top
plate for my Pi which has room for three buttons. These are hooked up to a
python script which allows me to start and stop the transmission, and skip or go
back songs. It also allows me to shut down the Pi instead of just pulling the
power cable.

If you like this tutorial and want to support my website, use this link to order a Digital Ocean VPS. You will get $10 free credit, which is equal to a free VPS for two months: [https://www.digitalocean.com/?refcode=7435ae6b8212](https://www.digitalocean.com/?refcode=7435ae6b8212)   

Please do note that transmitting radio like this might be restricted in your
country. In The Netherlands this setup (on FM bands 87,5 to 108 MHz) forbidden
because it has too much transmission power. Transmitting on those frequencies is
allowed if your transmittor has a maximum capacity of 50nW, and this setup has
way more than that. [Source: Agentschap
Telecom](http://www.agentschaptelecom.nl/gsearch/vergunningsvrije%2Bradiotoepassingen).

### Video

A small demo, shot with a phone and an Android app for lack of better equipment:

<iframe width="420" height="315" src="https://www.youtube.com/embed/QZFda0hv-ZE" frameborder="0" allowfullscreen></iframe>

### The Case

<img src="https://raymii.org/s/inc/img/Short_Crust.jpg" alt="Short Crust">

The base of my case is a [Short Crust](http://shortcrust.net/) case for the
Model B. I initially bought this case because it reroutes the USB power to the
front of the Pi. I mostly used it as a server back then, so having a power and a
network cable at one side of the device is quite nice. The case also looks
beautifull. I bought my case at [Pi Supply](https://www.pi-supply.com/).

Initially I wanted to use a 3D printer to make a case because I 
[have some experience with that](https://raymii.org/s/articles/3D_modelling_a_real_world_object_in_OpenSCAD.html). 
My hackerspace, [Revspace](https://revspace.nl) has a [Lasercutter](https://revspace.nl/Lasercutter) 
and I'd never used that before. 

<img src="https://raymii.org/s/inc/img/Lasercutter.jpg" alt="Lasercutter">

I decided to replace the default top plate on the Short Crust with my own PMMA
version which should have place for the three buttons and easy access to the
GPIO. I don't find a flat ribbon cable easy access. After receiving the
instructions and doing a few test cuts in plywood I fired up  Inkscape and found
myself a good ruler. I'd also never used Inkscape before but that is quite easy
to figure out after some fiddling around.

The SVG file of the top case can be downloaded [here](https://raymii.org/s/inc/img/Pi_Crust_Laser.svg). 
It was cut at power 60% and speed 1.5. Below is a PNG version of the SVG:

<img src="https://raymii.org/s/inc/img/Pi_Crust_Laser.png" alt="Top Plate">

My first attempts were not that great. Some measures were gambled the first
time, as you can see in the below picture.

<img src="https://raymii.org/s/inc/img/Pi_FM_4.png" alt="Compare">

- A: the rounding on the corners was way off
- B: the big access point to the GPIO pins was in the wrong spot

The holes for the screws were also a gamble, but, that was a lucky one, the are
in exactly the correct spot. The button holes were measured up and since it are
three standard [R13-57](https://www.google.nl/search?q=R13-57&rct=j) buttons
that was easy. 

After two attempts and correct measurements I succeeded in printing the correct
top plate. It also has my website logo in it, the resistor symbol. That is just
a nice touch.

### The Buttons

<img src="https://raymii.org/s/inc/img/R13-57.jpg" alt="R13-57" width="320" height="240">

I used three R13-57 push buttons for the input. They have wires soldered on to
them and a few pieces of electrical tape so that they do not short the Pi. There
is little space in the case. 

The buttons are wired up to GPIO pin 18, 23 and 24 (and ground of course). I've
used the built in Raspberry Pi Pull Up resistor. If you are using another board
of some kind please check if there is a pull up/down resistor built in,
otherwise you need to place one in between the button and your GPIO pin, you
will get drifting otherwise.

<img src="https://raymii.org/s/inc/img/Pi_FM_2.png" alt="PiFM 2">

### The Python Script

You can find the [Python script in my github](https://github.com/RaymiiOrg/rasplayer-fm). 
It is inspired by the [Pirate Radio](https://github.com/Make-Magazine/PirateRadio) script frome Make Magazine.

The only part used from that script is the config and the ffmpeg to pifm
converting. That script has no concept of a global playlist so implementing
start, stop and skip functions in it would be harder. 

I've used GPIO callbacks to handle the button input. The button functions are
listed below, where bottom is where the network and USB ports are:

- Top button: Previous Song
- Middle button: Stop / Start playing
- Bottom button: Next song

If you first press the Middle (Stop) button and then the Top (Previous) button
the Raspberry Pi will shut itself down using the `shutdown -h now` command.
After a few seconds you can safely disconnect the power of the Pi without
corrupting your SD card.

<img src="https://raymii.org/s/inc/img/Pi_FM_3.png" alt="PiFM 3">

### Setup Instructions

- Wire up three buttons to GPIO pins 18, 23, 24 and ground.
- Wire up a simple wire on GPIO pin 4 for the antenna.
- Load up Raspbian on your SD card.
- Install `ffmpeg` and `python3`.
- Create a folder `/rasplayerfm/` and place all your music there.
- Place a config file there:

        # /rasplayerfm/rasplayerfm.conf
        [rasplayerfm]
        frequency = 101.0
        shuffle = False
        repeat_all = True
        stereo_playback = True
        music_dir = /rasplayerfm

- Place the compiled `pifm` binary and the `RasplayerFM.py` script there as well.
- Add the following to `/etc/rc.local` (above the `exit 0` line):


        /usr/bin/python3 /rasplayerfm/RasplayerFM.py &


- Mark the `/etc/rc.local` file as executable:


        chmod +x /etc/rc.local


- Tune your FM radio to the frequency set in the config file.
- Reboot the Pi.
- Wait a few moments.
- Enjoy.

When you boot the Pi up it will automatically start playing on the set
frequency. With the buttons you can start, stop and skip music as described
above. 

This was an interesting project for me because it upped my knowledge and
experience with a Lasercutter, Inkscape, GPIO, soldering and Python programming
with callbacks and external inputs.

All the code (plus SVG file) from this article is released under the GPLv3. The
images are Creative Commons BY-NC-SA.


---

License:
All the text on this website is free as in freedom unless stated otherwise. 
This means you can use it in any way you want, you can copy it, change it 
the way you like and republish it, as long as you release the (modified) 
content under the same license to give others the same freedoms you've got 
and place my name and a link to this site with the article as source.

This site uses Google Analytics for statistics and Google Adwords for 
advertisements. You are tracked and Google knows everything about you. 
Use an adblocker like ublock-origin if you don't want it.

All the code on this website is licensed under the GNU GPL v3 license 
unless already licensed under a license which does not allows this form 
of licensing or if another license is stated on that page / in that software:

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

Just to be clear, the information on this website is for ment for educational 
purposes and you use it at your own risk. I do not take responsibility if you 
screw something up. Use common sense, do not rm -rf / as root for example. 
If you have any questions then do not hesitate to contact me.

See https://raymii.org/s/static/About.html for details.